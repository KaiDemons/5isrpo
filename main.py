import telebot
from telebot import types
from datetime import datetime, timedelta
from database import Database
import keyboards as kb
from config import BOT_TOKEN, INVENTORY_TYPES, USER_ROLES

bot = telebot.TeleBot(BOT_TOKEN)
db = Database()

user_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    role = db.get_user_role(user_id)

    if role:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        markup = kb.main_menu_keyboard(role)
        bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à–∞ —Ä–æ–ª—å: {USER_ROLES[role]}", reply_markup=markup)
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
        user_states[user_id] = 'waiting_for_role'
        markup = kb.role_selection_keyboard()
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_role')
def process_role_selection(message):
    user_id = message.from_user.id
    selected_role_name = message.text

    # –ò—â–µ–º —Ä–æ–ª—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    selected_role = None
    for role, role_name in USER_ROLES.items():
        if role_name == selected_role_name:
            selected_role = role
            break

    if selected_role:
        if db.add_user(message.from_user.id, selected_role):
            bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {selected_role_name}!",
                             reply_markup=kb.main_menu_keyboard(selected_role))
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
                             reply_markup=kb.main_menu_keyboard())
        del user_states[user_id]  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")


@bot.message_handler(func=lambda m: m.text == 'üîÑ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å')
def start_rental(message):
    try:
        markup = types.InlineKeyboardMarkup()
        available_items = db.get_available_items()
        if available_items:
            for item in available_items:
                markup.add(types.InlineKeyboardButton(
                    f"{item[1]} {item[2]}",
                    callback_data=f"rent_{item[0]}"
                ))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –∞—Ä–µ–Ω–¥—ã.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('rent_'))
def process_rental(call):
    item_id = call.data.split('_')[1]
    user_id = call.from_user.id
    user_states[user_id] = {'state': 'waiting_for_duration', 'item_id': item_id}
    msg = bot.send_message(call.message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å?")
    bot.register_next_step_handler(msg, process_rental_duration)


def process_rental_duration(message):
    user_id = message.from_user.id
    try:
        rental_duration = int(message.text)
        if rental_duration <= 0:
            raise ValueError("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        item_id = user_states[user_id]['item_id']
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ —á–∞—Å –∏–∑ –ë–î
        item_price_per_hour = db.get_item_price_per_hour(item_id)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
        total_cost = rental_duration * item_price_per_hour

        user_states[user_id]['rental_duration'] = rental_duration
        user_states[user_id]['total_cost'] = total_cost

        msg = bot.send_message(message.chat.id, f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(msg, process_phone)

    except ValueError as e:
        bot.send_message(message.chat.id,
                         f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–±–æ–ª—å—à–µ –Ω—É–ª—è). –û—à–∏–±–∫–∞: {e}")
        del user_states[user_id]


def process_phone(message):
    user_id = message.from_user.id
    try:
        phone = message.text

        item_id = user_states[user_id]['item_id']
        rental_duration = user_states[user_id]['rental_duration']
        total_cost = user_states[user_id]['total_cost']

        client_id = db.add_client(message.from_user.first_name, phone)
        start_time = datetime.now()
        end_time = start_time + timedelta(hours=rental_duration)

        rental_id = db.create_rental_with_details(client_id, item_id, start_time.strftime("%Y-%m-%d %H:%M:%S"),
                                                  end_time.strftime("%Y-%m-%d %H:%M:%S"), total_cost)
        db.update_inventory_status(item_id, 'rented')  # –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞

        bot.send_message(message.chat.id,
                         f"–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! ID: {rental_id}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {rental_duration} —á.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
    finally:
        del user_states[user_id]


@bot.message_handler(func=lambda m: m.text == 'üìä –û—Ç—á–µ—Ç—ã')
def show_reports(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç', callback_data='report_finance'),
               types.InlineKeyboardButton('üì¶ –û—Ç—á–µ—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é', callback_data='report_inventory'),
               types.InlineKeyboardButton('üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏', callback_data='report_popular'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('report_'))
def handle_reports(call):
    report_type = call.data.split('_')[1]

    try:
        if report_type == 'finance':
            data = db.get_financial_report('2023-01-01', '2023-12-31')
            if data:
                text = f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {data[0]} —Ä—É–±.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–µ–Ω–¥: {data[1]}"
            else:
                text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."
        elif report_type == 'inventory':
            text = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:\n"
            for row in db.get_inventory_report():
                text += f"{row[0]}: {row[2]} —à—Ç. ({row[1]})\n"
        else:
            text = "–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ:\n"
            for i, row in enumerate(db.get_popular_items(), 1):
                text += f"{i}. ID {row[0]} - {row[1]} –∞—Ä–µ–Ω–¥\n"

        bot.send_message(call.message.chat.id, text)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤)
add_inventory_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è


@bot.message_handler(
    func=lambda message: db.get_user_role(message.from_user.id) == 'seller' and message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
def add_inventory_start(message):
    user_id = message.from_user.id
    add_inventory_states[user_id] = {'state': 'waiting_for_type'}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for item_type in INVENTORY_TYPES:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ config.py
        markup.add(item_type)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_inventory_type)


def process_inventory_type(message):
    user_id = message.from_user.id
    inventory_type = message.text

    if inventory_type not in INVENTORY_TYPES:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        del add_inventory_states[user_id]  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    add_inventory_states[user_id]['type'] = inventory_type
    add_inventory_states[user_id]['state'] = 'waiting_for_brand'

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Stels):",
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_inventory_brand)


def process_inventory_brand(message):
    user_id = message.from_user.id
    inventory_brand = message.text
    add_inventory_states[user_id]['brand'] = inventory_brand
    add_inventory_states[user_id]['state'] = 'waiting_for_size'

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤–≤–µ–¥–∏—Ç–µ '-'):")
    bot.register_next_step_handler(message, process_inventory_size)


def process_inventory_size(message):
    user_id = message.from_user.id
    inventory_size = message.text
    add_inventory_states[user_id]['size'] = inventory_size
    add_inventory_states[user_id]['state'] = 'waiting_for_price'

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —á–∞—Å –ø—Ä–æ–∫–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 150.0):")
    bot.register_next_step_handler(message, process_inventory_price)


def process_inventory_price(message):
    user_id = message.from_user.id
    try:
        inventory_price = float(message.text)
        add_inventory_states[user_id]['price'] = inventory_price

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        inventory_type = add_inventory_states[user_id]['type']
        inventory_brand = add_inventory_states[user_id]['brand']
        inventory_size = add_inventory_states[user_id]['size']
        inventory_price = add_inventory_states[user_id]['price']

        item_id = db.add_inventory(inventory_type, inventory_brand, inventory_size, inventory_price)

        bot.send_message(message.chat.id, f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {item_id}")

    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    finally:
        del add_inventory_states[user_id]  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        role = db.get_user_role(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        markup = kb.main_menu_keyboard(role)
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def show_help(message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    üîÑ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∞—Ä–µ–Ω–¥—É
    üìä –û—Ç—á–µ—Ç—ã - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–µ –ø—É–Ω–∫—Ç–∞ –ø—Ä–æ–∫–∞—Ç–∞
    ‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    bot.send_message(message.chat.id, help_text)


if __name__ == '__main__':
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")